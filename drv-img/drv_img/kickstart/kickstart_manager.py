"""This module is used to modify kickstart file"""

import os
from pykickstart.version import makeVersion
from pykickstart.parser import KickstartParser, Script
from pykickstart.constants import KS_SCRIPT_POST, KS_SCRIPT_PRE

from drv_img.utils import run_cmd
from drv_img.core.global_config import GlobalConfig

KS_PATH = "/usr/share/anaconda/interactive-defaults.ks"
MOVE_PATH = "/_tmp"

INS_SHELL_SCRIPT = """\
# The content of this script is generated by drv-img
#!/bin/bash
set -x

RPM_PATH={}
for i in $(find $RPM_PATH -name "*.rpm"); do
    if command -v rpm >/dev/null 2>&1; then
        rpm -i $i --nodeps --force
    else
        dnf install $i --releasever {} -y
    fi
done

KO_PATH={}
for i in $(find $KO_PATH -name "*.ko"); do
    if command -v rpm >/dev/null 2>&1; then
        mv $i /lib/modules/`uname -r`/updates/
    fi
    modprobe -a /lib/modules/`uname -r`/updates/$(basename $i .ko) -f
done

depmod -a
"""


class KickManager:
    """
    The KickManager class is responsible for managing the kickstart process. 

    Attributes:
        _install_path (str): The path to the installation image.
        _rpm_list (list): A list of RPMs to be installed.
        _ko_list (list): A list of kernel objects to be installed.

    Methods:
        modify_kickstart(kck_file, output_file): Modifies the kickstart file.
        move_driver(): Moves the driver files to a temporary directory for future use.
    """
    def __init__(self, install_img_path, rpm_list, ko_list):
        self._install_path = install_img_path
        self._rpm_list = rpm_list
        self._ko_list = ko_list

    def modify_kickstart(self, kck_file, output_file):
        """
        Modifies the kickstart file.

        This method reads a kickstart file, processes its sections, 
        and writes the modified content to an output file.

        Args:
            kck_file (str): The path to the kickstart file to be modified.
            output_file (str): The path to the output file where the 
                            modified kickstart content will be written.

        Returns:
            None
        """
        ks_content = self._read_kickstart_file(kck_file)

        ks_parser = KickstartParser(makeVersion())
        ks_parser.readKickstartFromString(ks_content)
        self._process_file_sections(ks_parser)

        self._write_to_output_file(output_file, ks_parser.handler)

    def _process_file_sections(self, ks_parser):
        self._add_pre_section(ks_parser)
        self._add_post_section(ks_parser)

    def _add_pre_section(self, ks_parser):
        content = INS_SHELL_SCRIPT.format(MOVE_PATH, GlobalConfig.VERSION_ID,
                                          MOVE_PATH)
        self._add_script_to_section(ks_parser,
                                    content,
                                    in_chroot=False,
                                    script_type=KS_SCRIPT_PRE)

    def _add_post_section(self, ks_parser):
        content = f"# The content of this script is generated by drv-img\n"\
            f"mv {MOVE_PATH} /mnt/sysimage{MOVE_PATH}"
        self._add_script_to_section(ks_parser,
                                    content,
                                    in_chroot=False,
                                    script_type=KS_SCRIPT_POST)
        chroot_content = INS_SHELL_SCRIPT.format(MOVE_PATH,
                                                 GlobalConfig.VERSION_ID,
                                                 MOVE_PATH)
        chroot_content += f"rm -rf {MOVE_PATH}"
        self._add_script_to_section(ks_parser,
                                    chroot_content,
                                    in_chroot=True,
                                    script_type=KS_SCRIPT_POST)

    def move_driver(self):
        """
        Moves the driver files to a temporary directory for future use.

        This method creates a temporary directory in the installation path and 
        copies the kernel objects and RPMs to this directory.

        """
        # copy kernel_module and rpm to tmp dir for future ks usage
        tmp_path = self._install_path + MOVE_PATH
        run_cmd.mkdir_chain(tmp_path)
        for kernel_module in self._ko_list:
            run_cmd.cp_file(kernel_module, tmp_path)

        for rpm in self._rpm_list:
            run_cmd.cp_file(rpm, tmp_path)

    def _add_script_to_section(self,
                               ks_parser,
                               content,
                               in_chroot,
                               lineno=0,
                               interpreter='/bin/bash',
                               script_type=KS_SCRIPT_POST):
        """Adds a script to kickstart parser"""
        new_script = Script(content,
                            interp=interpreter,
                            inChroot=in_chroot,
                            lineno=lineno,
                            type=script_type)
        ks_parser.handler.scripts.append(new_script)

    def _read_kickstart_file(self, kck_file):
        """Reads and returns content of a kickstart file"""
        if not os.path.exists(kck_file):
            print(f"Kickstart file not found: {kck_file} try to create it")
            os.mknod(kck_file)
        with open(kck_file, 'r', encoding='utf-8') as kickstart_file:
            return kickstart_file.read()

    def _write_to_output_file(self, output_file, handler):
        """Writes to output file"""
        try:
            with open(output_file, 'w', encoding='utf-8') as file:
                file.write(str(handler))
        except IOError:
            print(f"Error writing to output file: {output_file}")

        with open(output_file, 'r+', encoding='utf-8') as file:
            contents = file.readlines()
            file.seek(0)
            for line in contents:
                if not line.startswith('bootloader'):
                    file.write(line)
            file.truncate()
